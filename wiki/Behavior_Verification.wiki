#labels Featured
== About ==
Behavior verification is implemented as the xUnit pattern, *Test Spy*, as defined by [http://xunitpatterns.com Gerard Meszaros].  The mock object has several introspection methods which provide an observation into the use of the mock object during the xUnit test run.

== Verifying Invocations ==
The {{{verifyXXX}}} methods allow xUnit test cases to assert if a given stubbed function has been invoke a certain number of times.  This is useful to ensure that no unexpected method invocations were encountered during the test run.  All of these examples will be mocking the simple interface below.

{{{
struct Foo
{
   virtual void bar() = 0;
};
}}}

=== Verify Exactly ===
{{{
#include <UnitTest++.h>
#include <mockitopp/MockObject.hpp>

struct Foo
{
   virtual void bar() = 0;
};

using mockitopp::MockObject;
TEST(TestVerifyExactly)
{
   MockObject<Foo> mock;
   mock.stub(&Foo::bar);
   Foo& fooImpl = mock.getMock();

   fooImpl.bar();
   fooImpl.bar();
   fooImpl.bar();

   CHECK(mock.verifyExactly(&Foo::bar, 3)); // pass
}
}}}

=== Verify At Least ===
{{{
#include <UnitTest++.h>
#include <mockitopp/MockObject.hpp>

using mockitopp::MockObject;
TEST(TestVerifyAtLeast)
{
   MockObject<Foo> mock;
   mock.stub(&Foo::bar);
   Foo& fooImpl = mock.getMock();

   fooImpl.bar();
   fooImpl.bar();
   fooImpl.bar();

   CHECK(mock.verifyAtLeast(&Foo::bar, 1)); // pass
   CHECK(mock.verifyAtLeast(&Foo::bar, 2)); // pass
   CHECK(mock.verifyAtLeast(&Foo::bar, 3)); // pass
   CHECK(mock.verifyAtLeast(&Foo::bar, 4)); // fail
}
}}}

=== Verify At Most ===
{{{
#include <UnitTest++.h>
#include <mockitopp/MockObject.hpp>

using mockitopp::MockObject;
TEST(TestVerifyAtMost)
{
   MockObject<Foo> mock;
   mock.stub(&Foo::bar);
   Foo& fooImpl = mock.getMock();

   fooImpl.bar();
   fooImpl.bar();
   fooImpl.bar();

   CHECK(mock.verifyAtMost(&Foo::bar, 4)); // pass
   CHECK(mock.verifyAtMost(&Foo::bar, 3)); // pass
   CHECK(mock.verifyAtMost(&Foo::bar, 2)); // fail
   CHECK(mock.verifyAtLeast(&Foo::bar, 3));
}
}}}

=== Verify Never ===
{{{
#include <UnitTest++.h>
#include <mockitopp/MockObject.hpp>

using mockitopp::MockObject;
TEST(TestVerifyAtMost)
{
   MockObject<Foo> mock;
   mock.stub(&Foo::bar);
   Foo& fooImpl = mock.getMock();

   CHECK(mock.verifyNever(&Foo::bar)); // pass
   fooImpl.bar();
   CHECK(mock.verifyNever(&Foo::bar)); // fail
}
}}}

=== Verify Range ===
{{{
#include <UnitTest++.h>
#include <mockitopp/MockObject.hpp>

using mockitopp::MockObject;
TEST(TestVerifyAtMost)
{
   MockObject<Foo> mock;
   mock.stub(&Foo::bar);
   Foo& fooImpl = mock.getMock();

   fooImpl.bar();
   fooImpl.bar();
   CHECK(mock.verifyNever(&Foo::bar, 1, 3)); // pass
   fooImpl.bar();
   CHECK(mock.verifyNever(&Foo::bar, 1, 3)); // pass
   fooImpl.bar();
   CHECK(mock.verifyNever(&Foo::bar, 1, 3)); // fail
}
}}}